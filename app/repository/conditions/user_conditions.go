// Code generated by cql-gen v0.1.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/stori_challenge/app/models"
	decimal "github.com/shopspring/decimal"
	"time"
)

type userConditions struct {
	ID        condition.Field[models.User, model.UIntID]
	CreatedAt condition.Field[models.User, time.Time]
	UpdatedAt condition.Field[models.User, time.Time]
	DeletedAt condition.Field[models.User, time.Time]
	Email     condition.StringField[models.User]
	Balance   condition.UpdatableField[models.User, decimal.Decimal]
}

var User = userConditions{
	Balance:   condition.NewUpdatableField[models.User, decimal.Decimal]("Balance", "", ""),
	CreatedAt: condition.NewField[models.User, time.Time]("CreatedAt", "", ""),
	DeletedAt: condition.NewField[models.User, time.Time]("DeletedAt", "", ""),
	Email:     condition.NewStringField[models.User]("Email", "", ""),
	ID:        condition.NewField[models.User, model.UIntID]("ID", "", ""),
	UpdatedAt: condition.NewField[models.User, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the User when doing a query
func (userConditions userConditions) preload() condition.Condition[models.User] {
	return condition.NewPreloadCondition[models.User](userConditions.ID, userConditions.CreatedAt, userConditions.UpdatedAt, userConditions.DeletedAt, userConditions.Email, userConditions.Balance)
}
