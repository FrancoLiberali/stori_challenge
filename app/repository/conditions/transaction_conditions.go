// Code generated by cql-gen v0.1.0, DO NOT EDIT.
package conditions

import (
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	models "github.com/FrancoLiberali/stori_challenge/app/models"
	decimal "github.com/shopspring/decimal"
	"time"
)

type transactionConditions struct {
	ID        condition.Field[models.Transaction, model.UIntID]
	CreatedAt condition.Field[models.Transaction, time.Time]
	UpdatedAt condition.Field[models.Transaction, time.Time]
	DeletedAt condition.Field[models.Transaction, time.Time]
	IDInFile  condition.NumericField[models.Transaction, uint]
	FileName  condition.StringField[models.Transaction]
	Date      condition.UpdatableField[models.Transaction, time.Time]
	Amount    condition.UpdatableField[models.Transaction, decimal.Decimal]
}

var Transaction = transactionConditions{
	Amount:    condition.NewUpdatableField[models.Transaction, decimal.Decimal]("Amount", "", ""),
	CreatedAt: condition.NewField[models.Transaction, time.Time]("CreatedAt", "", ""),
	Date:      condition.NewUpdatableField[models.Transaction, time.Time]("Date", "", ""),
	DeletedAt: condition.NewField[models.Transaction, time.Time]("DeletedAt", "", ""),
	FileName:  condition.NewStringField[models.Transaction]("FileName", "", ""),
	ID:        condition.NewField[models.Transaction, model.UIntID]("ID", "", ""),
	IDInFile:  condition.NewNumericField[models.Transaction, uint]("IDInFile", "", ""),
	UpdatedAt: condition.NewField[models.Transaction, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the Transaction when doing a query
func (transactionConditions transactionConditions) preload() condition.Condition[models.Transaction] {
	return condition.NewPreloadCondition[models.Transaction](transactionConditions.ID, transactionConditions.CreatedAt, transactionConditions.UpdatedAt, transactionConditions.DeletedAt, transactionConditions.IDInFile, transactionConditions.FileName, transactionConditions.Date, transactionConditions.Amount)
}
