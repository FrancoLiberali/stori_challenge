// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	models "github.com/FrancoLiberali/stori_challenge/app/models"
)

// ITransactionService is an autogenerated mock type for the ITransactionService type
type ITransactionService struct {
	mock.Mock
}

// Apply provides a mock function with given fields: email, transactions, transactionsBalance
func (_m *ITransactionService) Apply(email string, transactions []models.Transaction, transactionsBalance decimal.Decimal) (*models.User, error) {
	ret := _m.Called(email, transactions, transactionsBalance)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []models.Transaction, decimal.Decimal) (*models.User, error)); ok {
		return rf(email, transactions, transactionsBalance)
	}
	if rf, ok := ret.Get(0).(func(string, []models.Transaction, decimal.Decimal) *models.User); ok {
		r0 = rf(email, transactions, transactionsBalance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []models.Transaction, decimal.Decimal) error); ok {
		r1 = rf(email, transactions, transactionsBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITransactionService creates a new instance of ITransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransactionService {
	mock := &ITransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
